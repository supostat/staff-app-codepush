fastlane_version "2.53.1"
fastlane_require "semantic"
fastlane_require "semantic/core_ext"
fastlane_require 'aws-sdk'

Dotenv.load("../.env")
require "./fastlane_helpers"

before_all do
  ensure_git_branch
  ensure_git_status_clean

  Dotenv.require_keys(
    "IOS_PROJECT_FOLDER",
    "ANDROID_PROJECT_FOLDER",
    "IOS_APP_NAME",
    "IOS_PROJECT_FILE_PATH",
    "IOS_APP_IDENTIFIER",
    "IOS_PROJECT_SCHEME",
    "CODE_PUSH_IOS",
    "CODE_PUSH_ANDROID",
    "S3_ACCESS_KEY",
    "S3_SECRET_ACCESS_KEY",
    "S3_BUCKET",
    "S3_REGION",
    "S3_IMAGE_BUCKET",
    "S3_IMAGE_FOLDER",
    "SENTRY_LINK",
    "S3_IOS_APP_DIR",
    "S3_ANDROID_APP_DIR",
  )
end

lane :js_deploy do
  new_version = increment_package_json_minor_version!
  ios_code_push_deploy
  android_code_push_deploy
  git_commit(path: ["package.json"], message: "Version Bump (#{new_version})")
  add_git_tag(
    tag: "v#{new_version.to_s}",
  )
  push_git_tags
end

lane :s3_deploy_ios do
  folder = ENV["S3_IMAGE_FOLDER"].empty? ? "" : ENV["S3_IMAGE_FOLDER"] + "/"
  aws_s3(
    access_key: ENV["S3_ACCESS_KEY"],
    secret_access_key: ENV["S3_SECRET_ACCESS_KEY"],
    bucket: ENV["S3_BUCKET"],
    region: ENV["S3_REGION"],
    app_directory: ENV["S3_IOS_APP_DIR"],
    html_template_path: "fastlane/s3_ios_html_template.erb",
    html_template_params: {
      base_img_url: "https://#{ENV["S3_IMAGE_BUCKET"]}.s3.#{ENV["S3_REGION"]}.amazonaws.com/#{folder}"
    }
  )
end
lane :s3_deploy_android do
  folder = ENV["S3_IMAGE_FOLDER"].empty? ? "" : ENV["S3_IMAGE_FOLDER"] + "/"
  aws_s3(
    access_key: ENV["S3_ACCESS_KEY"],
    secret_access_key: ENV["S3_SECRET_ACCESS_KEY"],
    bucket: ENV["S3_BUCKET"],
    region: ENV["S3_REGION"],
    app_directory: ENV["S3_ANDROID_APP_DIR"],
    html_template_path: "fastlane/s3_android_html_template.erb",
    html_template_params: {
      base_img_url: "https://#{ENV["S3_IMAGE_BUCKET"]}.s3.#{ENV["S3_REGION"]}.amazonaws.com/#{folder}"
    }
  )
end

lane :full_deploy do
  new_version = increment_package_json_major_version!
  images_deploy
  ios_build
  s3_deploy_ios
  ios_app_url = Actions.lane_context[SharedValues::S3_HTML_OUTPUT_PATH]
  Actions.lane_context[SharedValues::IPA_OUTPUT_PATH] = nil
  Actions.lane_context[SharedValues::DSYM_OUTPUT_PATH] = nil
  android_build
  s3_deploy_android
  android_app_url = Actions.lane_context[SharedValues::S3_HTML_OUTPUT_PATH]
  Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] = nil
  ios_code_push_deploy
  android_code_push_deploy
  git_commit(path: ["package.json", "ios/#{ENV["IOS_APP_NAME"]}/Info.plist", "android/app/build.gradle"], message: "Version Bump (#{new_version})")
  add_git_tag(
    tag: "v#{new_version.to_s}",
  )
  push_git_tags
  UI.success("Android app can be downloaded at '#{ios_app_url}'")
  UI.success("iOS app can be downloaded at '#{android_app_url}'")
end

desc "Deploy images for the app download pages"
private_lane :images_deploy do
  upload_files_to_s3
  UI.success("Files uploaded successful")
end

desc "Fetch certificates and provisioning profiles"
lane :certificates do
  match(app_identifier: ENV["IOS_APP_IDENTIFIER"], type: "enterprise")
end

desc "Build the iOS application."
lane :ios_build do
  certificates
  version = read_package_json_version
  update_ios_version!(version: version)
  gym(
    scheme: ENV["IOS_PROJECT_SCHEME"],
    project: ENV["IOS_PROJECT_FILE_PATH"],
    output_directory: "builds/",
    output_name: "#{ENV["IOS_APP_NAME"]}.ipa",
    silent: true,
  )
end

desc "Deploy to Code Push"
private_lane :ios_code_push_deploy do
  code_push_release_react(
    app_name: ENV["CODE_PUSH_IOS"],
    platform: "ios",
  )
end

desc "Deploy Android to Code Push"
private_lane :android_code_push_deploy do
  code_push_release_react(
    app_name: ENV["CODE_PUSH_ANDROID"],
    platform: "android",
  )
end

desc "Build the Android application."
lane :android_build do
  version = read_package_json_version
  update_android_version!(version: version)

  gradle(task: "clean", project_dir: "android/")
  gradle(task: "assemble", build_type: "Release", project_dir: "android/")
end
